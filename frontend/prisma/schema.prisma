// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  role          String    @default("patient") // patient, doctor, admin, pharmacist
  phoneNumber   String?
  dateOfBirth   DateTime?
  gender        String?   // male, female, other
  address       String?
  emergencyContact String?
  bloodType     String?   // A+, A-, B+, B-, AB+, AB-, O+, O-
  allergies     String?   // JSON string of allergies
  medicalHistory String?  // JSON string of medical history
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  prescriptions Prescription[]
  medicalRecords MedicalRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Healthcare-specific models
model Doctor {
  id           String @id @default(cuid())
  userId       String @unique
  licenseNumber String @unique
  specialization String
  experience   Int    // years of experience
  hospital     String?
  consultationFee Float
  availability String // JSON string of available time slots
  rating       Float  @default(0)
  totalRatings Int    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  appointments Appointment[]
}

model Appointment {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String
  dateTime    DateTime
  duration    Int      // in minutes
  type        String   // online, in-person, emergency
  status      String   @default("scheduled") // scheduled, completed, cancelled, no-show
  notes       String?
  symptoms    String?  // Patient's reported symptoms
  diagnosis   String?  // Doctor's diagnosis
  prescription String? // Prescription details
  fee         Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  patient User   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Prescription {
  id          String @id @default(cuid())
  patientId   String
  doctorId    String?
  medications String // JSON array of medications
  instructions String
  dateIssued  DateTime @default(now())
  validUntil  DateTime
  status      String @default("active") // active, expired, fulfilled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  patient User @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model MedicalRecord {
  id          String @id @default(cuid())
  patientId   String
  recordType  String // lab_result, imaging, prescription, visit_note
  title       String
  description String
  fileUrl     String?
  dateRecorded DateTime @default(now())
  doctorNotes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  patient User @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Pharmacy {
  id          String @id @default(cuid())
  name        String
  address     String
  phoneNumber String
  email       String?
  licenseNumber String @unique
  workingHours String // JSON string
  rating      Float @default(0)
  totalRatings Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  medications PharmacyMedication[]
}

model Medication {
  id          String @id @default(cuid())
  name        String
  genericName String?
  manufacturer String
  description String?
  sideEffects String? // JSON array
  dosageForm  String  // tablet, capsule, syrup, injection
  strength    String  // mg, ml, etc.
  category    String  // antibiotic, painkiller, etc.
  requiresPrescription Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  pharmacies PharmacyMedication[]
}

model PharmacyMedication {
  id           String @id @default(cuid())
  pharmacyId   String
  medicationId String
  price        Float
  stock        Int
  expiryDate   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  pharmacy   Pharmacy   @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  medication Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  
  @@unique([pharmacyId, medicationId])
}

model EmergencyContact {
  id           String @id @default(cuid())
  name         String
  phoneNumber  String
  relationship String
  address      String?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
